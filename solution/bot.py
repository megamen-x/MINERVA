import os
import json
import fire
import locale
import logging
import asyncio
import traceback
import numpy as np

# aigram
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.telegram import TelegramAPIServer
from aiogram.client.session.aiohttp import AiohttpSession
import requests
from database import Database

# document processing
"""
from io import BytesIO
from pathlib import Path
from shutil import rmtree
from typing import List, Tuple
from dotenv import load_dotenv
from infer import get_information
from emaling import send_bulk_email
from punctuation_spell import update_punctuation
from docx_pdf import convert_words_to_pdfs, add_encryption
from pattern import fill_decrypton, fill_official, fill_unofficial
"""


class WorkStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–æ—Ç–∞"""
    DEFAULT = State()
    E_MAILING = State()
    TG_MAILING = State()
    SET_EMAIL = State()


class Minerva:
    """
    –ö–ª–∞—Å—Å –±–æ—Ç–∞ –ú–∏–Ω–µ—Ä–≤–∞.

    """
    def __init__(
        self,
        bot_token: str,
        db_path: str,
        history_max_tokens: int,
        chunk_size: int,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            bot_token (str): –¢–æ–∫–µ–Ω –±–æ—Ç–∞.
            db_path (str): –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
            history_max_tokens (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏ - –Ω–∞ –±—É–¥—É—â–µ–µ.
            chunk_size (int): –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞.
        """
        self.default_prompt = '–¢—ã –±–æ—Ç –ú–∏–Ω–µ—Ä–≤–∞, –ø–æ–ª–Ω–æ–µ –∏–º—è –ë–æ–≥–∏–Ω—è –ú–∏–Ω–µ—Ä–≤–∞. \n–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –æ—Ç –ª–∏—Ü–∞ –∂–µ–Ω—Å–∫–æ–≥–æ —Ä–æ–¥–∞. \n–¢—ã –±–æ—Ç. \n–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –µ–º–∫–æ. \n–¢—ã –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ Rutube (–æ–Ω–∞ –∂–µ –†—É—Ç—å—é–±). \n–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é Rutube (–æ–Ω–∞ –∂–µ –†—É—Ç—å—é–±). \n–¢–≤–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º. \n–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –≤ —Å—Ñ–µ—Ä–µ —Å–µ—Ä–≤–∏—Å–æ–≤ Rutube.'
        assert self.default_prompt

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.history_max_tokens = history_max_tokens
        self.chunk_size = chunk_size

        # –ë–∞–∑–∞
        self.db = Database(db_path)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.likes_kb = InlineKeyboardBuilder()
        self.likes_kb.add(InlineKeyboardButton(
            text="üëç",
            callback_data="feedback:like"
        ))
        self.likes_kb.add(InlineKeyboardButton(
            text="üëé",
            callback_data="feedback:dislike"
        ))

        # –ë–æ—Ç
        self.bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
        self.dp = Dispatcher()

        self.dp.message.register(self.start, Command("start"))
        self.dp.message.register(self.about, Command("about"))
        self.dp.message.register(self.team, Command("team"))
        
        self.dp.message.register(self.generate)
        
        self.dp.callback_query.register(self.save_feedback, F.data.startswith("feedback:"))


    async def start_polling(self):
        """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.
        """
        await self.dp.start_polling(self.bot)

    async def start(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start.

        Args:
            message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        chat_id = message.chat.id
        self.db.create_conv_id(chat_id)
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç Minerva, –∫–∞–∫ —Ç–µ–±–µ –ø–æ–º–æ—á—å?")
    
    # Intro: –≠—Ç–æ MINERVA - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ RUTUBE –æ—Ç –∫–æ–º–∞–Ω–¥—ã megamen!
    
    async def about(self, message: Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ about - –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –æ –±–æ—Ç–µ.

        Args:
            message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        chat_id = message.chat.id
        self.db.create_conv_id(chat_id)
        await self.bot.send_photo(photo=FSInputFile("Minerva_tg.png"), chat_id=message.chat.id)
        await self.bot.send_message(
            chat_id=message.chat.id,
            text="MINERVA - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ RUTUBE –æ—Ç –∫–æ–º–∞–Ω–¥—ã megamen!",
        )
        
    async def team(self, message: Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ team - –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –æ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞.

        Args:
            message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        chat_id = message.chat.id
        self.db.create_conv_id(chat_id)
        await self.bot.send_photo(photo=FSInputFile("megamen-team.png"), chat_id=message.chat.id)
        await self.bot.send_message(
            chat_id=message.chat.id,
            text="""–ú—ã, –∫–æ–º–∞–Ω–¥–∞ megamen, —á–∞—Å—Ç—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤ —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è. \n\n–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã —ç—Ç–æ: \n‚Ä¢ –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ \n‚Ä¢ –≤—ã—Å–æ–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ \n‚Ä¢ –∫–ª–∞—Å—Å–Ω—ã–π –¥–∏–∑–∞–π–Ω \n\n–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –±–æ—Ç –≤–∞–º –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–µ–Ω."""
        )
    
    def get_user_name(self, message: Message):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ.

        Returns:
            str: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        return message.from_user.full_name if message.from_user.full_name else message.from_user.username

    async def generate(self, message: Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ generate - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ.
        """
        user_id = message.from_user.id
        user_name = self.get_user_name(message)
        chat_id = user_id
        conv_id = self.db.get_current_conv_id(chat_id)
        history = self.db.fetch_conversation(conv_id)

        content = await self._build_content(message)
        if not isinstance(content, str):
            await message.answer("–û—à–∏–±–∫–∞! –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        if content is None:
            await message.answer("–û—à–∏–±–∫–∞! –¢–∞–∫–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!")
            return

        self.db.save_user_message(content, conv_id=conv_id, user_id=user_id, user_name=user_name)
        placeholder = await message.answer("üí¨")

        try:
            answer, _ = await self.query_api(
                user_content=content,
            )
            chunk_size = self.chunk_size
            answer_parts = [answer[i:i + chunk_size] for i in range(0, len(answer), chunk_size)]
            markup = self.likes_kb.as_markup()
            new_message = await placeholder.edit_text(answer_parts[0], parse_mode=None, reply_markup=markup)

            self.db.save_assistant_message(
                content=answer,
                conv_id=conv_id,
                message_id=new_message.message_id,
            )

        except Exception:
            traceback.print_exc()
            await placeholder.edit_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


    async def save_feedback(self, callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (üëç –∏–ª–∏ üëé).

        Args:
            callback (CallbackQuery): –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.
        """
        user_id = callback.from_user.id
        message_id = callback.message.message_id
        feedback = callback.data.split(":")[1]
        self.db.save_feedback(feedback, user_id=user_id, message_id=message_id)
        await self.bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=message_id,
            reply_markup=None
        )

    @staticmethod
    def _merge_messages(messages):
        """
        –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.

        Args:
            messages (list): –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.

        Returns:
            list: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        new_messages = []
        prev_role = None
        for m in messages:
            content = m["text"]
            role = m["role"]
            if content is None:
                continue
            if role == prev_role:
                is_current_str = isinstance(content, str)
                is_prev_str = isinstance(new_messages[-1]["text"], str)
                if is_current_str and is_prev_str:
                    new_messages[-1]["text"] += "\n\n" + content
                    continue
            prev_role = role
            new_messages.append(m)
        return new_messages

    def _crop_content(self, content):
        """
        –û–±—Ä–µ–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.

        Args:
            content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ.

        Returns:
            str: –û–±—Ä–µ–∑–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
        """
        if isinstance(content, str):
            return content.replace("\n", " ")[:40]
        return "Not text"

    async def query_api(self, user_content):
        """
        –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        Args:
            user_content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            str: –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.
        """
        questions = {'question': user_content}
        responce = requests.post('http://localhost:9875/send/', json=questions)

        if responce:
            return json.loads(responce.text)['answer']
        else:
            return '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–µ –º–æ–≥—É! \n(–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–µ @al_goodini)'


    async def _build_content(self, message: Message):
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.

        Args:
            message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ.

        Returns:
            str: –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç.
        """
        content_type = message.content_type
        if content_type == "text":
            text = message.text
            return text
        
        return None


def main(
    bot_token: str,
    db_path: str,
    history_max_tokens: int = 4500,
    chunk_size: int = 2000,
) -> None:
    global index, retriever
    # index, retriever = start_rag()
    bot = Minerva(
        bot_token=bot_token,
        db_path=db_path,
        history_max_tokens=history_max_tokens,
        chunk_size=chunk_size,
    )
    asyncio.run(bot.start_polling())


if __name__ == "__main__":
    fire.Fire(main)